// src/app/(auth)/auth/callback/oauth/page.tsx
'use client'

import { useEffect, useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import { Icons } from '@/components/ui/icons'
import { Alert, AlertDescription } from '@/components/ui/alert'

export default function OAuthCallbackPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const handleOAuthCallback = async () => {
      try {
        const supabase = createClient()
        
        // Get the error from URL if any
        const error = searchParams.get('error')
        const errorDescription = searchParams.get('error_description')
        
        if (error) {
          setError(errorDescription || 'Authentication failed')
          setLoading(false)
          return
        }

        // Get the code from URL
        const code = searchParams.get('code')
        
        if (!code) {
          setError('No authorization code received')
          setLoading(false)
          return
        }

        // Exchange code for session
        const { data, error: authError } = await supabase.auth.exchangeCodeForSession(code)
        
        if (authError) {
          setError(authError.message)
          setLoading(false)
          return
        }

        // Check if this is a new user
        if (data.user) {
          const { data: profile } = await supabase
            .from('profiles')
            .select('*')
            .eq('user_id', data.user.id)
            .single()

          // If no profile exists, create one with OAuth data
          if (!profile) {
            await supabase.from('profiles').insert({
              user_id: data.user.id,
              // Add any additional profile fields from OAuth provider
            })
          }

          // Update user metadata if needed
          const userMetadata = data.user.user_metadata
          if (userMetadata.name || userMetadata.full_name || userMetadata.avatar_url) {
            await supabase.from('users').update({
              name: userMetadata.name || userMetadata.full_name,
              avatar_url: userMetadata.avatar_url,
            }).eq('id', data.user.id)
          }
        }

        // Redirect to dashboard or intended destination
        const redirectTo = searchParams.get('redirectTo') || '/dashboard'
        router.push(redirectTo)
      } catch (err: any) {
        setError(err.message || 'An unexpected error occurred')
        setLoading(false)
      }
    }

    handleOAuthCallback()
  }, [router, searchParams])

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <Icons.spinner className="mx-auto h-8 w-8 animate-spin text-gray-400" />
          <p className="mt-4 text-sm text-gray-600">Completing sign in...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex min-h-screen items-center justify-center px-4">
        <div className="w-full max-w-md space-y-8">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-red-600">Authentication Error</h2>
          </div>
          
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>

          <div className="space-y-4">
            <a
              href="/login"
              className="block w-full rounded-md bg-primary px-4 py-2 text-center text-sm font-medium text-white hover:bg-primary/90"
            >
              Back to Login
            </a>
            
            <p className="text-center text-xs text-gray-500">
              If this problem persists, please contact support.
            </p>
          </div>
        </div>
      </div>
    )
  }

  return null
}







// src/lib/auth/oauth-service.ts
import { createClient } from '@/lib/supabase/server'
import { User } from '@supabase/supabase-js'

interface OAuthProfile {
  id: string
  email: string
  name?: string
  avatar_url?: string
  provider: 'google' | 'github' | 'discord'
}

export class OAuthService {
  // Extract profile data from OAuth user metadata
  static extractProfileData(user: User): OAuthProfile | null {
    const metadata = user.user_metadata
    const identities = user.identities || []
    
    if (!metadata || identities.length === 0) {
      return null
    }

    const provider = identities[0].provider as 'google' | 'github' | 'discord'
    
    switch (provider) {
      case 'google':
        return {
          id: user.id,
          email: user.email || metadata.email,
          name: metadata.full_name || metadata.name,
          avatar_url: metadata.avatar_url || metadata.picture,
          provider,
        }
      
      case 'github':
        return {
          id: user.id,
          email: user.email || metadata.email,
          name: metadata.full_name || metadata.name || metadata.user_name,
          avatar_url: metadata.avatar_url,
          provider,
        }
      
      case 'discord':
        return {
          id: user.id,
          email: user.email || metadata.email,
          name: metadata.full_name || metadata.global_name || metadata.username,
          avatar_url: metadata.avatar_url,
          provider,
        }
      
      default:
        return null
    }
  }

  // Sync OAuth profile data to database
  static async syncOAuthProfile(user: User) {
    const supabase = createClient()
    const profileData = this.extractProfileData(user)
    
    if (!profileData) {
      return { error: 'Unable to extract profile data' }
    }

    try {
      // Check if user exists in users table
      const { data: existingUser } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single()

      if (!existingUser) {
        // Create user record with OAuth data
        const { error: userError } = await supabase
          .from('users')
          .insert({
            id: user.id,
            email: profileData.email,
            name: profileData.name,
            avatar_url: profileData.avatar_url,
            email_verified: new Date().toISOString(), // OAuth users are pre-verified
          })

        if (userError && userError.code !== '23505') { // Ignore duplicate key error
          throw userError
        }
      } else {
        // Update existing user with OAuth data if missing
        const updates: any = {}
        
        if (!existingUser.name && profileData.name) {
          updates.name = profileData.name
        }
        
        if (!existingUser.avatar_url && profileData.avatar_url) {
          updates.avatar_url = profileData.avatar_url
        }

        if (Object.keys(updates).length > 0) {
          await supabase
            .from('users')
            .update(updates)
            .eq('id', user.id)
        }
      }

      // Check if profile exists
      const { data: existingProfile } = await supabase
        .from('profiles')
        .select('*')
        .eq('user_id', user.id)
        .single()

      if (!existingProfile) {
        // Create profile
        await supabase
          .from('profiles')
          .insert({
            user_id: user.id,
            // Additional profile fields can be added here
          })
      }

      // Store OAuth provider info
      await this.storeOAuthProvider(user.id, profileData.provider)

      return { success: true }
    } catch (error: any) {
      console.error('OAuth profile sync error:', error)
      return { error: error.message }
    }
  }

  // Store OAuth provider information
  static async storeOAuthProvider(userId: string, provider: string) {
    const supabase = createClient()
    
    // You might want to create a separate table for this
    // For now, we can store it in user metadata or a JSON field
    try {
      await supabase
        .from('users')
        .update({
          auth_providers: [provider], // Store as array for multiple providers
        })
        .eq('id', userId)
    } catch (error) {
      console.error('Failed to store OAuth provider:', error)
    }
  }

  // Link OAuth account to existing user
  static async linkOAuthAccount(userId: string, provider: 'google' | 'github' | 'discord') {
    const supabase = createClient()
    
    // This would require additional Supabase configuration
    // For now, return a placeholder
    return {
      error: 'Account linking not yet implemented',
    }
  }

  // Unlink OAuth account
  static async unlinkOAuthAccount(userId: string, provider: 'google' | 'github' | 'discord') {
    const supabase = createClient()
    
    // This would require additional Supabase configuration
    // For now, return a placeholder
    return {
      error: 'Account unlinking not yet implemented',
    }
  }
}










-- supabase/migrations/20240528000000_add_oauth_providers.sql

-- Add auth_providers field to users table
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS auth_providers TEXT[] DEFAULT '{}',
ADD COLUMN IF NOT EXISTS email_verified TIMESTAMP WITH TIME ZONE;

-- Create oauth_accounts table for managing linked accounts
CREATE TABLE IF NOT EXISTS oauth_accounts (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  provider VARCHAR(50) NOT NULL,
  provider_user_id VARCHAR(255) NOT NULL,
  provider_email VARCHAR(255),
  provider_data JSONB,
  linked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(provider, provider_user_id),
  UNIQUE(user_id, provider)
);

-- Create indexes
CREATE INDEX idx_oauth_accounts_user_id ON oauth_accounts(user_id);
CREATE INDEX idx_oauth_accounts_provider ON oauth_accounts(provider);

-- Add RLS policies
ALTER TABLE oauth_accounts ENABLE ROW LEVEL SECURITY;

-- Users can view their own OAuth accounts
CREATE POLICY "Users can view own OAuth accounts" ON oauth_accounts
  FOR SELECT USING (user_id = auth.uid());

-- Users can link OAuth accounts
CREATE POLICY "Users can link OAuth accounts" ON oauth_accounts
  FOR INSERT WITH CHECK (user_id = auth.uid());

-- Users can unlink OAuth accounts
CREATE POLICY "Users can unlink OAuth accounts" ON oauth_accounts
  FOR DELETE USING (user_id = auth.uid());

-- Function to handle OAuth login/signup
CREATE OR REPLACE FUNCTION handle_oauth_user()
RETURNS TRIGGER AS $$
BEGIN
  -- If user doesn't exist in users table, create them
  INSERT INTO users (id, email, email_verified)
  VALUES (NEW.id, NEW.email, NOW())
  ON CONFLICT (id) DO UPDATE
  SET email_verified = COALESCE(users.email_verified, NOW());
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to sync auth.users with public.users
CREATE TRIGGER on_auth_user_created_oauth
  AFTER INSERT ON auth.users
  FOR EACH ROW
  WHEN (NEW.raw_app_meta_data->>'provider' IS NOT NULL)
  EXECUTE FUNCTION handle_oauth_user();
















// src/components/auth/oauth-button.tsx
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Icons } from '@/components/ui/icons'
import { cn } from '@/lib/utils'

interface OAuthButtonProps {
  provider: 'google' | 'github' | 'discord'
  onClick: () => Promise<void>
  disabled?: boolean
  className?: string
}

const providerConfig = {
  google: {
    icon: Icons.google,
    label: 'Google',
    className: 'hover:bg-gray-50',
  },
  github: {
    icon: Icons.github,
    label: 'GitHub',
    className: 'hover:bg-gray-900 hover:text-white',
  },
  discord: {
    icon: (props: any) => (
      <svg role="img" viewBox="0 0 24 24" {...props}>
        <path
          fill="currentColor"
          d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z"
        />
      </svg>
    ),
    label: 'Discord',
    className: 'hover:bg-[#5865F2] hover:text-white',
  },
}

export function OAuthButton({ provider, onClick, disabled, className }: OAuthButtonProps) {
  const [loading, setLoading] = useState(false)
  const config = providerConfig[provider]
  const Icon = config.icon

  const handleClick = async () => {
    setLoading(true)
    try {
      await onClick()
    } catch (error) {
      // Error is handled by parent component
    } finally {
      setLoading(false)
    }
  }

  return (
    <Button
      type="button"
      variant="outline"
      onClick={handleClick}
      disabled={disabled || loading}
      className={cn(config.className, className)}
    >
      {loading ? (
        <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
      ) : (
        <Icon className="mr-2 h-4 w-4" />
      )}
      {config.label}
    </Button>
  )
}

// OAuth buttons group component
interface OAuthButtonsProps {
  onSignIn: (provider: 'google' | 'github' | 'discord') => Promise<void>
  disabled?: boolean
  providers?: ('google' | 'github' | 'discord')[]
}

export function OAuthButtons({ 
  onSignIn, 
  disabled, 
  providers = ['google', 'github'] 
}: OAuthButtonsProps) {
  return (
    <div className="grid grid-cols-2 gap-4">
      {providers.map((provider) => (
        <OAuthButton
          key={provider}
          provider={provider}
          onClick={() => onSignIn(provider)}
          disabled={disabled}
        />
      ))}
    </div>
  )
}











// src/app/(auth)/login/page.tsx
'use client'

import { useState } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { useAuth } from '@/hooks/use-auth'
import { OAuthButtons } from '@/components/auth/oauth-button'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Icons } from '@/components/ui/icons'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Separator } from '@/components/ui/separator'

export default function LoginPage() {
  const searchParams = useSearchParams()
  const redirectTo = searchParams.get('redirectTo') || '/dashboard'
  
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [magicLinkEmail, setMagicLinkEmail] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [magicLinkSent, setMagicLinkSent] = useState(false)
  
  const router = useRouter()
  const { signIn, signInWithProvider } = useAuth()

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError(null)

    const { error } = await signIn(email, password)

    if (error) {
      setError(error)
      setLoading(false)
      return
    }

    router.push(redirectTo)
  }

  const handleMagicLink = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/auth/magic-link', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: magicLinkEmail }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Failed to send magic link')
      }

      setMagicLinkSent(true)
    } catch (err: any) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  const handleOAuthSignIn = async (provider: 'google' | 'github' | 'discord') => {
    setError(null)
    const { error } = await signInWithProvider(provider as 'google' | 'github')
    if (error) {
      setError(error)
    }
  }

  if (magicLinkSent) {
    return (
      <div className="flex min-h-screen items-center justify-center px-4">
        <div className="w-full max-w-md space-y-8">
          <div className="text-center">
            <Icons.check className="mx-auto h-12 w-12 text-green-600" />
            <h2 className="mt-6 text-3xl font-bold">Check your email</h2>
            <p className="mt-2 text-sm text-gray-600">
              We sent a sign in link to <strong>{magicLinkEmail}</strong>
            </p>
          </div>
          
          <div className="rounded-lg bg-blue-50 p-4">
            <p className="text-sm text-blue-800">
              Click the link in the email to sign in. If you don't see the email, check your spam folder.
            </p>
          </div>

          <button
            onClick={() => setMagicLinkSent(false)}
            className="block w-full text-center text-sm font-medium text-primary hover:underline"
          >
            Use a different email
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 px-4">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <h2 className="text-3xl font-bold">Welcome back</h2>
          <p className="mt-2 text-sm text-gray-600">
            Sign in to your account to continue
          </p>
        </div>

        <div className="bg-white p-8 rounded-lg shadow-sm border">
          {error && (
            <Alert variant="destructive" className="mb-6">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* OAuth Buttons */}
          <div className="space-y-4">
            <OAuthButtons
              onSignIn={handleOAuthSignIn}
              disabled={loading}
              providers={['google', 'github']}
            />

            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <Separator className="w-full" />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-white px-2 text-muted-foreground">
                  Or continue with email
                </span>
              </div>
            </div>
          </div>

          <Tabs defaultValue="password" className="w-full mt-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="password">Password</TabsTrigger>
              <TabsTrigger value="magic-link">Magic Link</TabsTrigger>
            </TabsList>
            
            <TabsContent value="password" className="mt-6">
              <form onSubmit={handleLogin} className="space-y-6">
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="email">Email address</Label>
                    <Input
                      id="email"
                      name="email"
                      type="email"
                      autoComplete="email"
                      required
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="john@example.com"
                      className="mt-1"
                    />
                  </div>
                  
                  <div>
                    <div className="flex items-center justify-between">
                      <Label htmlFor="password">Password</Label>
                      <Link
                        href="/reset-password"
                        className="text-sm text-primary hover:underline"
                      >
                        Forgot password?
                      </Link>
                    </div>
                    <Input
                      id="password"
                      name="password"
                      type="password"
                      autoComplete="current-password"
                      required
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="••••••••"
                      className="mt-1"
                    />
                  </div>
                </div>

                <Button type="submit" className="w-full" disabled={loading}>
                  {loading ? (
                    <>
                      <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                      Signing in...
                    </>
                  ) : (
                    'Sign in'
                  )}
                </Button>
              </form>
            </TabsContent>
            
            <TabsContent value="magic-link" className="mt-6">
              <form onSubmit={handleMagicLink} className="space-y-6">
                <div>
                  <Label htmlFor="magic-email">Email address</Label>
                  <Input
                    id="magic-email"
                    name="email"
                    type="email"
                    autoComplete="email"
                    required
                    value={magicLinkEmail}
                    onChange={(e) => setMagicLinkEmail(e.target.value)}
                    placeholder="john@example.com"
                    className="mt-1"
                  />
                  <p className="mt-2 text-xs text-gray-500">
                    We'll send you a magic link to sign in without a password
                  </p>
                </div>

                <Button type="submit" className="w-full" disabled={loading}>
                  {loading ? (
                    <>
                      <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                      Sending magic link...
                    </>
                  ) : (
                    'Send magic link'
                  )}
                </Button>
              </form>
            </TabsContent>
          </Tabs>

          <div className="mt-6 text-center text-sm">
            <span className="text-gray-600">Don't have an account? </span>
            <Link href="/register" className="font-medium text-primary hover:underline">
              Sign up
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}







